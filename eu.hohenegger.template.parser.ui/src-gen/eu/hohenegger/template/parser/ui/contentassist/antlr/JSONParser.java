/*
* generated by Xtext
*/
package eu.hohenegger.template.parser.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import eu.hohenegger.template.parser.services.JSONGrammarAccess;

public class JSONParser extends AbstractContentAssistParser {
	
	@Inject
	private JSONGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected eu.hohenegger.template.parser.ui.contentassist.antlr.internal.InternalJSONParser createParser() {
		eu.hohenegger.template.parser.ui.contentassist.antlr.internal.InternalJSONParser result = new eu.hohenegger.template.parser.ui.contentassist.antlr.internal.InternalJSONParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
					put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
					put(grammarAccess.getObjectAccess().getGroup_2(), "rule__Object__Group_2__0");
					put(grammarAccess.getEntryAccess().getGroup(), "rule__Entry__Group__0");
					put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
					put(grammarAccess.getArrayAccess().getGroup_2(), "rule__Array__Group_2__0");
					put(grammarAccess.getRootAccess().getContentAssignment(), "rule__Root__ContentAssignment");
					put(grammarAccess.getObjectAccess().getEntriesAssignment_1(), "rule__Object__EntriesAssignment_1");
					put(grammarAccess.getObjectAccess().getEntriesAssignment_2_1(), "rule__Object__EntriesAssignment_2_1");
					put(grammarAccess.getEntryAccess().getKeyAssignment_0(), "rule__Entry__KeyAssignment_0");
					put(grammarAccess.getEntryAccess().getValueAssignment_2(), "rule__Entry__ValueAssignment_2");
					put(grammarAccess.getArrayAccess().getValuesAssignment_1(), "rule__Array__ValuesAssignment_1");
					put(grammarAccess.getArrayAccess().getValuesAssignment_2_1(), "rule__Array__ValuesAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			eu.hohenegger.template.parser.ui.contentassist.antlr.internal.InternalJSONParser typedParser = (eu.hohenegger.template.parser.ui.contentassist.antlr.internal.InternalJSONParser) parser;
			typedParser.entryRuleRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public JSONGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JSONGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
