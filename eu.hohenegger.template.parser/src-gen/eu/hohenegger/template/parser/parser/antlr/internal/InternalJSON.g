/*
* generated by Xtext
*/
grammar InternalJSON;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eu.hohenegger.template.parser.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.hohenegger.template.parser.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.hohenegger.template.parser.services.JSONGrammarAccess;

}

@parser::members {

 	private JSONGrammarAccess grammarAccess;
 	
    public InternalJSONParser(TokenStream input, JSONGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Tag";	
   	}
   	
   	@Override
   	protected JSONGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTag
entryRuleTag returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	 iv_ruleTag=ruleTag 
	 { $current=$iv_ruleTag.current; } 
	 EOF 
;

// Rule Tag
ruleTag returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LD_0=RULE_LD
    { 
    newLeafNode(this_LD_0, grammarAccess.getTagAccess().getLDTerminalRuleCall_0()); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTagAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTagRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAccess().getAttributesAttributeParserRuleCall_2_0()); 
	    }
		lv_attributes_2_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*((	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTagAccess().getSolidusKeyword_3_0_0());
    }
this_RD_4=RULE_RD
    { 
    newLeafNode(this_RD_4, grammarAccess.getTagAccess().getRDTerminalRuleCall_3_0_1()); 
    }
)
    |(this_RD_5=RULE_RD
    { 
    newLeafNode(this_RD_5, grammarAccess.getTagAccess().getRDTerminalRuleCall_3_1_0()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTagAccess().getSubTagsTagParserRuleCall_3_1_1_0_0()); 
	    }
		lv_subTags_6_0=ruleTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagRule());
	        }
       		add(
       			$current, 
       			"subTags",
        		lv_subTags_6_0, 
        		"Tag");
	        afterParserOrEnumRuleCall();
	    }

)
)*
    |(((
(
ruleTextNode
)
))=>(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAccess().getTextNodeTextNodeParserRuleCall_3_1_1_1_0_0()); 
	    }
		lv_textNode_7_0=ruleTextNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagRule());
	        }
       		set(
       			$current, 
       			"textNode",
        		lv_textNode_7_0, 
        		"TextNode");
	        afterParserOrEnumRuleCall();
	    }

)
)))this_LD_8=RULE_LD
    { 
    newLeafNode(this_LD_8, grammarAccess.getTagAccess().getLDTerminalRuleCall_3_1_2()); 
    }
	otherlv_9='/' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTagAccess().getSolidusKeyword_3_1_3());
    }
this_ID_10=RULE_ID
    { 
    newLeafNode(this_ID_10, grammarAccess.getTagAccess().getIDTerminalRuleCall_3_1_4()); 
    }
this_RD_11=RULE_RD
    { 
    newLeafNode(this_RD_11, grammarAccess.getTagAccess().getRDTerminalRuleCall_3_1_5()); 
    }
)))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_ID
		{
			newLeafNode(lv_key_0_0, grammarAccess.getAttributeAccess().getKeyIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getAttributeAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleTextNode
entryRuleTextNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextNodeRule()); }
	 iv_ruleTextNode=ruleTextNode 
	 { $current=$iv_ruleTextNode.current; } 
	 EOF 
;

// Rule TextNode
ruleTextNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_TEXT_NODE_ELEMENT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getTextNodeAccess().getValueTEXT_NODE_ELEMENTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextNodeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"TEXT_NODE_ELEMENT");
	    }

)
)*
;





RULE_LD : '<';

RULE_RD : '>';

RULE_STRING : '"' ~('"')* '"';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : ('a'..'y')+;

RULE_TEXT_NODE_ELEMENT : ~(('<'|'>'));


