/*
* generated by Xtext
*/
package eu.hohenegger.template.parser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class JSONGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cSolidusKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final RuleCall cRDTerminalRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cRDTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cSubTagsAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cSubTagsTagParserRuleCall_3_1_1_0_0 = (RuleCall)cSubTagsAssignment_3_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1 = (Group)cAlternatives_3_1_1.eContents().get(1);
		private final Assignment cTextNodeAssignment_3_1_1_1_0 = (Assignment)cGroup_3_1_1_1.eContents().get(0);
		private final RuleCall cTextNodeTextNodeParserRuleCall_3_1_1_1_0_0 = (RuleCall)cTextNodeAssignment_3_1_1_1_0.eContents().get(0);
		private final RuleCall cLDTerminalRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		private final Keyword cSolidusKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_3_1_4 = (RuleCall)cGroup_3_1.eContents().get(4);
		private final RuleCall cRDTerminalRuleCall_3_1_5 = (RuleCall)cGroup_3_1.eContents().get(5);
		
		//Tag:
		//	LD name=ID attributes+=Attribute* ("/" RD | RD (subTags+=Tag* | => (textNode=TextNode)) LD "/" ID RD);
		public ParserRule getRule() { return rule; }

		//LD name=ID attributes+=Attribute* ("/" RD | RD (subTags+=Tag* | => (textNode=TextNode)) LD "/" ID RD)
		public Group getGroup() { return cGroup; }

		//LD
		public RuleCall getLDTerminalRuleCall_0() { return cLDTerminalRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }

		//"/" RD | RD (subTags+=Tag* | => (textNode=TextNode)) LD "/" ID RD
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"/" RD
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"/"
		public Keyword getSolidusKeyword_3_0_0() { return cSolidusKeyword_3_0_0; }

		//RD
		public RuleCall getRDTerminalRuleCall_3_0_1() { return cRDTerminalRuleCall_3_0_1; }

		//RD (subTags+=Tag* | => (textNode=TextNode)) LD "/" ID RD
		public Group getGroup_3_1() { return cGroup_3_1; }

		//RD
		public RuleCall getRDTerminalRuleCall_3_1_0() { return cRDTerminalRuleCall_3_1_0; }

		//subTags+=Tag* | => (textNode=TextNode)
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//subTags+=Tag*
		public Assignment getSubTagsAssignment_3_1_1_0() { return cSubTagsAssignment_3_1_1_0; }

		//Tag
		public RuleCall getSubTagsTagParserRuleCall_3_1_1_0_0() { return cSubTagsTagParserRuleCall_3_1_1_0_0; }

		//=> (textNode=TextNode)
		public Group getGroup_3_1_1_1() { return cGroup_3_1_1_1; }

		//textNode=TextNode
		public Assignment getTextNodeAssignment_3_1_1_1_0() { return cTextNodeAssignment_3_1_1_1_0; }

		//TextNode
		public RuleCall getTextNodeTextNodeParserRuleCall_3_1_1_1_0_0() { return cTextNodeTextNodeParserRuleCall_3_1_1_1_0_0; }

		//LD
		public RuleCall getLDTerminalRuleCall_3_1_2() { return cLDTerminalRuleCall_3_1_2; }

		//"/"
		public Keyword getSolidusKeyword_3_1_3() { return cSolidusKeyword_3_1_3; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_1_4() { return cIDTerminalRuleCall_3_1_4; }

		//RD
		public RuleCall getRDTerminalRuleCall_3_1_5() { return cRDTerminalRuleCall_3_1_5; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//	key=ID "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//key=ID "=" value=STRING
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class TextNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextNode");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueTEXT_NODE_ELEMENTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		/// *returns textNode * / TextNode: //'z'*
		//	value+=TEXT_NODE_ELEMENT*;
		public ParserRule getRule() { return rule; }

		////'z'*
		//value+=TEXT_NODE_ELEMENT*
		public Assignment getValueAssignment() { return cValueAssignment; }

		//TEXT_NODE_ELEMENT
		public RuleCall getValueTEXT_NODE_ELEMENTTerminalRuleCall_0() { return cValueTEXT_NODE_ELEMENTTerminalRuleCall_0; }
	}
	
	
	private TagElements pTag;
	private AttributeElements pAttribute;
	private TextNodeElements pTextNode;
	private TerminalRule tLD;
	private TerminalRule tRD;
	private TerminalRule tSTRING;
	private TerminalRule tWS;
	private TerminalRule tID;
	private TerminalRule tTEXT_NODE_ELEMENT;
	
	private final Grammar grammar;

	@Inject
	public JSONGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.hohenegger.template.parser.JSON".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Tag:
	//	LD name=ID attributes+=Attribute* ("/" RD | RD (subTags+=Tag* | => (textNode=TextNode)) LD "/" ID RD);
	public TagElements getTagAccess() {
		return (pTag != null) ? pTag : (pTag = new TagElements());
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}

	//Attribute:
	//	key=ID "=" value=STRING;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	/// *returns textNode * / TextNode: //'z'*
	//	value+=TEXT_NODE_ELEMENT*;
	public TextNodeElements getTextNodeAccess() {
		return (pTextNode != null) ? pTextNode : (pTextNode = new TextNodeElements());
	}
	
	public ParserRule getTextNodeRule() {
		return getTextNodeAccess().getRule();
	}

	//terminal LD returns ecore::EString:
	//	"<";
	public TerminalRule getLDRule() {
		return (tLD != null) ? tLD : (tLD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LD"));
	} 

	//terminal RD returns ecore::EString:
	//	">";
	public TerminalRule getRDRule() {
		return (tRD != null) ? tRD : (tRD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RD"));
	} 

	//terminal STRING returns ecore::EString:
	//	"\"" !"\""* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal WS returns ecore::EString:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ID returns ecore::EString:
	//	"a".."y"+;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	/// *
	// terminal ID:
	//	(!('<' | '>'))+
	//;
	// * / terminal TEXT_NODE_ELEMENT returns ecore::EString:
	//	!("<" | ">");
	public TerminalRule getTEXT_NODE_ELEMENTRule() {
		return (tTEXT_NODE_ELEMENT != null) ? tTEXT_NODE_ELEMENT : (tTEXT_NODE_ELEMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXT_NODE_ELEMENT"));
	} 
}
