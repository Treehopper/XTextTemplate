/*
* generated by Xtext
*/
package eu.hohenegger.template.parser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class JSONGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentJObjectParserRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//Root:
		//	content=JObject;
		public ParserRule getRule() { return rule; }

		//content=JObject
		public Assignment getContentAssignment() { return cContentAssignment; }

		//JObject
		public RuleCall getContentJObjectParserRuleCall_0() { return cContentJObjectParserRuleCall_0; }
	}

	public class JObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cJObjectAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cEntriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntriesEntryParserRuleCall_2_0 = (RuleCall)cEntriesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEntriesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEntriesEntryParserRuleCall_3_1_0 = (RuleCall)cEntriesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JObject:
		//	"{" {JObject} entries+=Entry? ("," entries+=Entry)* "}";
		public ParserRule getRule() { return rule; }

		//"{" {JObject} entries+=Entry? ("," entries+=Entry)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{JObject}
		public Action getJObjectAction_1() { return cJObjectAction_1; }

		//entries+=Entry?
		public Assignment getEntriesAssignment_2() { return cEntriesAssignment_2; }

		//Entry
		public RuleCall getEntriesEntryParserRuleCall_2_0() { return cEntriesEntryParserRuleCall_2_0; }

		//("," entries+=Entry)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//entries+=Entry
		public Assignment getEntriesAssignment_3_1() { return cEntriesAssignment_3_1; }

		//Entry
		public RuleCall getEntriesEntryParserRuleCall_3_1_0() { return cEntriesEntryParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Entry:
		//	key=STRING ":" value=Value;
		public ParserRule getRule() { return rule; }

		//key=STRING ":" value=Value
		public Group getGroup() { return cGroup; }

		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJTerminalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	JObject | Array | JTerminal;
		public ParserRule getRule() { return rule; }

		//JObject | Array | JTerminal
		public Alternatives getAlternatives() { return cAlternatives; }

		//JObject
		public RuleCall getJObjectParserRuleCall_0() { return cJObjectParserRuleCall_0; }

		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }

		//JTerminal
		public RuleCall getJTerminalParserRuleCall_2() { return cJTerminalParserRuleCall_2; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cArrayAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Array:
		//	"[" {Array} values+=Value? ("," values+=Value)* "]";
		public ParserRule getRule() { return rule; }

		//"[" {Array} values+=Value? ("," values+=Value)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//{Array}
		public Action getArrayAction_1() { return cArrayAction_1; }

		//values+=Value?
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//Value
		public RuleCall getValuesValueParserRuleCall_2_0() { return cValuesValueParserRuleCall_2_0; }

		//("," values+=Value)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=Value
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//Value
		public RuleCall getValuesValueParserRuleCall_3_1_0() { return cValuesValueParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class JTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JTerminal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueBooleanParserRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueNUMBERTerminalRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		private final RuleCall cValueNullParserRuleCall_0_3 = (RuleCall)cValueAlternatives_0.eContents().get(3);
		
		//JTerminal:
		//	value=(STRING | Boolean | NUMBER | Null);
		public ParserRule getRule() { return rule; }

		//value=(STRING | Boolean | NUMBER | Null)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING | Boolean | NUMBER | Null
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//Boolean
		public RuleCall getValueBooleanParserRuleCall_0_1() { return cValueBooleanParserRuleCall_0_1; }

		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_0_2() { return cValueNUMBERTerminalRuleCall_0_2; }

		//Null
		public RuleCall getValueNullParserRuleCall_0_3() { return cValueNullParserRuleCall_0_3; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class NullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Null");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//Null:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}
	
	
	private RootElements pRoot;
	private JObjectElements pJObject;
	private EntryElements pEntry;
	private ValueElements pValue;
	private ArrayElements pArray;
	private JTerminalElements pJTerminal;
	private BooleanElements pBoolean;
	private NullElements pNull;
	private TerminalRule tNUMBER;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public JSONGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.hohenegger.template.parser.JSON".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Root:
	//	content=JObject;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//JObject:
	//	"{" {JObject} entries+=Entry? ("," entries+=Entry)* "}";
	public JObjectElements getJObjectAccess() {
		return (pJObject != null) ? pJObject : (pJObject = new JObjectElements());
	}
	
	public ParserRule getJObjectRule() {
		return getJObjectAccess().getRule();
	}

	//Entry:
	//	key=STRING ":" value=Value;
	public EntryElements getEntryAccess() {
		return (pEntry != null) ? pEntry : (pEntry = new EntryElements());
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}

	//Value:
	//	JObject | Array | JTerminal;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Array:
	//	"[" {Array} values+=Value? ("," values+=Value)* "]";
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//JTerminal:
	//	value=(STRING | Boolean | NUMBER | Null);
	public JTerminalElements getJTerminalAccess() {
		return (pJTerminal != null) ? pJTerminal : (pJTerminal = new JTerminalElements());
	}
	
	public ParserRule getJTerminalRule() {
		return getJTerminalAccess().getRule();
	}

	//Boolean:
	//	"true" | "false";
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//Null:
	//	"null";
	public NullElements getNullAccess() {
		return (pNull != null) ? pNull : (pNull = new NullElements());
	}
	
	public ParserRule getNullRule() {
		return getNullAccess().getRule();
	}

	//terminal NUMBER returns ecore::EString:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING returns ecore::EString:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal WS returns ecore::EString:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
